#!/bin/bash

# #############################################################################
# Deploys a new app version by rebuilding the image and containers
# This file is managed by Ansible. Any changes may be overwritten.
# #############################################################################

function ensureSuccess {
  if [ $? -ne 0 ]; then
    echo "ERROR"
    exit 1
  fi
}

function printout {
  YELLOW='\033[1;33m'
  NC='\033[0m'

  echo -e "=> ${YELLOW}$1${NC}"
}

WEB_CONTAINER="{{ app_name }}_web"
OLD_REV=${1:0:7}
NEW_REV=${2:0:7}
REFNAME=$3

cd {{ git_clone_path }}

# Reset to latest commit on branch
# This is effectively same as `git pull` but it
# correctly handles rollbacks via forced updates
git fetch origin
git reset --hard origin/{{ git_branch }}

printout "Building ${OLD_REV}..${NEW_REV} ($REFNAME)"

if [[ -n $(docker images -q $WEB_CONTAINER:${NEW_REV}) ]]; then
  printout "Image build ${WEB_CONTAINER}:${NEW_REV} already exists"
fi;

# Build images
printout "Building images"
docker-compose build
ensureSuccess

# Tag docker images with git SHA version
if [[ -z $(docker images -q $WEB_CONTAINER:${NEW_REV}) ]]; then
  printout "Tagging image build as ${WEB_CONTAINER}:${NEW_REV}"
  docker tag $WEB_CONTAINER:latest $WEB_CONTAINER:$NEW_REV
fi;

# Teardown current running containers
printout "Stopping current containers"
docker-compose down
ensureSuccess

# Cleanup dangling images
printout "Cleanup dangling images"
DANGLING_IMAGES=$(docker images -f "dangling=true" -q)
[[ -n $DANGLING_IMAGES ]] && docker rmi -f ${DANGLING_IMAGES}

# Recreate containers
printout "Recreating containers"
docker-compose up --no-start
ensureSuccess

# Run DB tasks
printout "Running: db:create"
docker-compose run --rm web bundle exec rake db:create
ensureSuccess
printout "Running: db:migrate"
docker-compose run --rm web bundle exec rake db:migrate
ensureSuccess
printout "Running: bundle exec rake i18n:js:export"
docker-compose run --rm web bundle exec rake i18n:js:export
ensureSuccess
printout "Running: yarn run prod-build"
docker-compose run --rm web yarn run prod-build
ensureSuccess

# Start services
printout "Starting containers"
docker-compose start
ensureSuccess

# Check size
IMAGE_COUNT=$(docker images | grep $WEB_CONTAINER | wc -l)
printout "There are ${IMAGE_COUNT} ${WEB_CONTAINER} images."
printout "Remember to periodically clean these up (e.g. docker image prune -a --filter \"until=240h\")"
